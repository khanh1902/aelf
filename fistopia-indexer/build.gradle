plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.3'
    id 'io.spring.dependency-management' version '1.1.3'
}
apply from: 'build.boot.gradle'

group = "$GRADLE_GROUP"
version = "$VERSION"
sourceCompatibility = "$GRADLE_SOURCE_COMPATIBILITY"
bootJar.archiveFileName = "${archivesBaseName}.jar"

java {
    sourceCompatibility = '17'
}

//bootJar {
//	excludeDevtools = true
//	classpath configurations.developmentOnly
//}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
//	liquibaseRuntime.extendsFrom runtimeClasspath
}

repositories {
    mavenCentral()
    maven { url 'https://plugins.gradle.org/m2/' }
    maven { url 'https://repo.spring.io/milestone' }
    maven { url 'https://repo.spring.io/snapshot' }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.liquibase:liquibase-core'

    implementation 'org.hibernate:hibernate-core:6.2.7.Final'
    implementation 'org.hibernate:hibernate-spatial:6.2.7.Final'
    implementation 'org.postgresql:postgresql:42.6.0'
    // https://github.com/vladmihalcea/hibernate-types
    // https://www.baeldung.com/hibernate-types-library
    // https://vladmihalcea.com/map-postgresql-range-column-type-jpa-hibernate/
    implementation 'com.vladmihalcea:hibernate-types-60:2.21.1'

    // https://mvnrepository.com/artifact/org.web3j
    implementation 'org.web3j:core:4.10.3'
    implementation 'org.web3j:crypto:4.10.3'
    implementation 'org.web3j:utils:4.10.3'
    implementation 'org.web3j:abi:4.10.3'
    implementation 'org.web3j:tuples:4.10.3'
    implementation 'org.web3j:contracts:4.10.3'

    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    // https://github.com/PlayFab/JavaSDK/releases
    //implementation 'com.playfab.client-sdk:0.198';
    //implementation 'com.playfab.server-sdk:0.198';
    //implementation 'com.playfab.combo-sdk:0.198';

    // https://mvnrepository.com/artifact/org.modelmapper/modelmapper
    implementation 'org.modelmapper:modelmapper:3.1.1'

    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'

    compileOnly 'org.projectlombok:lombok'
    // developmentOnly 'org.springframework.boot:spring-boot-docker-compose'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor 'org.hibernate:hibernate-jpamodelgen:6.3.1.Final'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'

    implementation 'org.apache.httpcomponents:httpclient:4.5.13'

    implementation 'io.aelf:aelf-sdk:1.1.0'

    // Redis:
    implementation 'org.springframework.data:spring-data-redis:3.2.0'
    implementation 'io.lettuce:lettuce-core:6.3.1.RELEASE'

    // RabbitMQ:
    implementation 'org.springframework.amqp:spring-rabbit'
}

tasks.named('test') {
    useJUnitPlatform()
}

task bootRunDebug(dependsOn: bootRun) {
    doFirst {
        print('Setting up development environment variables')
        file('.env.dev').readLines().each() {
            if (!it.isEmpty() && !it.startsWith("#")) {
                def pos = it.indexOf("=")
                def key = it.substring(0, pos)
                def value = it.substring(pos + 1)
                environment(key, value)
            }
        }
    }
}