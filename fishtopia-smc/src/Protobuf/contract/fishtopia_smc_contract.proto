syntax = "proto3";

import "aelf/core.proto";
import "aelf/options.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";
import "Protobuf/reference/acs12.proto";
// The namespace of this class
option csharp_namespace = "AElf.Contracts.FishtopiaSMC";

service FishtopiaSMC {
  // The name of the state class the smart contract is going to use to access blockchain state
  option (aelf.csharp_state) = "AElf.Contracts.FishtopiaSMC.FishtopiaSMCState";
  option (aelf.base) = "Protobuf/reference/acs12.proto";
  
  rpc Initialize(google.protobuf.Empty) returns (google.protobuf.Empty) {
  }
  
  rpc SetAdminWallet (AddressInput) returns (google.protobuf.Empty) {
  }

  rpc PurchaseItems (PurchaseItemsInput) returns (google.protobuf.Empty) {
  }

  rpc AddPaymentToken(AddressInput) returns (google.protobuf.Empty) {
  }

  rpc RemovePaymentToken (AddressInput) returns (google.protobuf.Empty) {
  }

  rpc AddItems (AddItemsInput) returns (google.protobuf.Empty) {
  }

  rpc RemoveItems(google.protobuf.StringValue) returns (google.protobuf.Empty) {
  }
  
  rpc RenounceOwnership (google.protobuf.Empty) returns (google.protobuf.Empty) {
  }

  rpc TransferOwnership (AddressInput) returns (google.protobuf.Empty) {
  }

  rpc Owner (google.protobuf.Empty) returns (google.protobuf.StringValue) {
    option (aelf.is_view) = true;
  }

  rpc AdminWallet(google.protobuf.Empty) returns (google.protobuf.StringValue) {
    option (aelf.is_view) = true;
  }
  
  rpc BalanceOf (AddressInput) returns (google.protobuf.Int64Value) {
    option (aelf.is_view) = true;
  }

  rpc AvailablePaymentToken (AddressInput) returns (google.protobuf.BoolValue) {
    option (aelf.is_view) = true;
  }

  rpc AvailableItems (google.protobuf.StringValue) returns (google.protobuf.BoolValue) {
    option (aelf.is_view) = true;
  }
}

message PurchaseItemsInput {
  int64 payable_amount = 1;
  string user_id = 2;
  string items_id = 3;
  aelf.Address payment_token = 4;
}

message PurchaseItemsEvent {
  option (aelf.is_event) = true;
  string user_id = 3;
  string items_id = 4;
  aelf.Address spender = 1;
  int64 payable_amount = 2;
  aelf.Address payment_token = 5;
}

message AddItemsInput {
  string items_id = 1;
  bool is_available = 2;
  bool can_buy = 3;
  aelf.Address payment_token = 4;
  int64 items_price = 5;
}

message RemoveItemsInput {
  string items_id = 1;
}

message ItemsOutput {
  string items_id = 1;
  bool is_available = 2;
  bool can_buy = 3;
  aelf.Address payment_token = 4;
  int64 items_price = 5;
}

message ItemsListOutput {
  repeated ItemsOutput items_output = 1;
}

message AddressInput {
  aelf.Address address = 1;
}

message ItemsDAO {
  string items_id = 1;     
  bool is_available = 2;    
  bool can_buy = 3;        
  aelf.Address payment_token = 4;   
  int64 items_price = 5;      
}
